import keyboards
import Api
from aiogram import Router
from aiogram.filters import Command, CommandStart, StateFilter, Text
from aiogram.types import Message, CallbackQuery
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

user_answer={}
bot_answer=[]
# user_answer={"departure":[],"arrival":[],"date_departure":{"year":[],"month":[],"day":[]},"price":[],"return_departure_date":[]}
class FSMFillForm(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Ç—Å–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    fill_departure = State()        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fill_arrival = State()         # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è
    fill_date_departure = State()   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fill_date_departure_kb = State()
    fill_way = State() 
    fill_way_one_two = State()   
    fill_date_return= State()
    fill_way_two_ticket= State()

router: Router = Router()

#–•–µ–Ω–¥–ª–µ—Ä –Ω–∞—á–∞–ª–æ
@router.message(CommandStart(), StateFilter(default_state))
async def process_start_command(message: Message, state: FSMContext):
    await state.clear()
    answer_start=await message.answer(text='–ù—É —á—Ç–æ, –Ω–∞—á–Ω–µ–º?', reply_markup=keyboards.go_kb())
    bot_answer.append(answer_start)

    

@router.message(Command(commands='begin'))
async def process_start_command(message: Message, state: FSMContext):
    await state.clear()
    ansewr_begin=await message.answer(text='–ù—É —á—Ç–æ, –Ω–∞—á–Ω–µ–º?', reply_markup=keyboards.go_kb())
    bot_answer.append(ansewr_begin)
    
    

#–•–µ–Ω–¥–ª–µ—Ä –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞
@router.callback_query(Text(text='–ü–æ–µ—Ö–∞–ª–∏!!!'))
async def process_departure(callback: CallbackQuery, state: FSMContext):
    answer_takeoff=await callback.message.answer(text='–û—Ç–∫—É–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–ª–µ—Ç?üõ´')
    await state.set_state(FSMFillForm.fill_departure)
    bot_answer.append(answer_takeoff)

#–•–µ–Ω–¥–ª–µ—Ä –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞
@router.message(StateFilter(FSMFillForm.fill_departure))
async def process_arrival(message: Message, state: FSMContext):
    asnwer_landing=await message.answer(text='–ì–¥–µ –Ω–∞–¥–æ –ø—Ä–µ–∑–µ–º–ª–∏—Ç—å—Å—è?üõ¨')
    user_answer[message.chat.id]={}
    user_answer[message.chat.id]["departure"] = message.text
    await state.set_state(FSMFillForm.fill_date_departure) 
    bot_answer.append(asnwer_landing)


#–•–µ–Ω–¥–ª–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏–ª–µ—Ç–∞.–≥–æ–¥
@router.message(StateFilter(FSMFillForm.fill_date_departure))
async def process_year(message: Message,state: FSMContext):
    user_answer[message.chat.id]["date_departure"]={}
    user_answer[message.chat.id]["return_departure_date"]={}
    user_answer[message.chat.id]["date_departure"].update({"year":0,"month":0,"day":0})
    user_answer[message.chat.id]["return_departure_date"].update({"year":0,"month":0,"day":0})
    user_answer[message.chat.id]["arrival"]= message.text
    answer_message_year=await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ–¥:", reply_markup=keyboards.year_kb())
    bot_answer.append(answer_message_year)
    await state.set_state(FSMFillForm.fill_date_departure_kb)
    
#–•–µ–Ω–¥–ª–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏–ª–µ—Ç–∞.–º–µ—Å—è—Ü 
@router.callback_query(Text(text=keyboards.year),StateFilter(FSMFillForm.fill_date_departure_kb))
async def process_month(callback: CallbackQuery):
    global answer_message_month
    if user_answer[callback.from_user.id]["date_departure"]["year"]:
        user_answer[callback.from_user.id]["date_departure"]["year"]= callback.data
        await answer_message_month.edit_text(text="–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—è—Ü:",
                                         reply_markup=keyboards.month_kb(user_answer[callback.from_user.id]["date_departure"]["year"]))
        if user_answer[callback.from_user.id]["date_departure"]["day"]:
            await answer_message_day.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å:", reply_markup=keyboards.day_kb(int(user_answer[callback.from_user.id]["date_departure"]["year"]),
                                                                                    int(1+keyboards.months.index(user_answer[callback.from_user.id]["date_departure"]["month"]))))
    else:
        user_answer[callback.from_user.id]["date_departure"]["year"]= callback.data
        answer_message_month = await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—è—Ü:", reply_markup=keyboards.month_kb(user_answer[callback.from_user.id]["date_departure"]["year"]))
    bot_answer.append(answer_message_month)

#–•–µ–Ω–¥–ª–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏–ª–µ—Ç–∞.–¥–µ–Ω—å
@router.callback_query(Text(text=keyboards.months),StateFilter(FSMFillForm.fill_date_departure_kb))
async def process_day(callback: CallbackQuery,state: FSMContext):
    global answer_message_day
    if user_answer[callback.from_user.id]["date_departure"]["month"]:
        user_answer[callback.from_user.id]["date_departure"]["month"] = callback.data
        await answer_message_day.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å:", reply_markup=keyboards.day_kb(int(user_answer[callback.from_user.id]["date_departure"]["year"]),
                                                                                    int(1+keyboards.months.index(user_answer[callback.from_user.id]["date_departure"]["month"]))))
    else:
        user_answer[callback.from_user.id]["date_departure"]["month"] = callback.data
        answer_message_day = await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å:", reply_markup=keyboards.day_kb(int(user_answer[callback.from_user.id]["date_departure"]["year"]),
                                                                                    int(1+keyboards.months.index(user_answer[callback.from_user.id]["date_departure"]["month"]))))
    bot_answer.append(answer_message_day)
    await state.set_state(FSMFillForm.fill_way_one_two)


#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç—É–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ      
@router.callback_query(Text(text=keyboards.list_day),StateFilter(FSMFillForm.fill_way_one_two)) 
async def process_one_way(callback: CallbackQuery):
    user_answer[callback.from_user.id]["date_departure"]["day"]= callback.data
    answer_way=await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É –∏–ª–∏ –≤ –æ–±–µ:", reply_markup=keyboards.way_kb())
    bot_answer.append(answer_way)

#–í—ã–¥–∞—á–∞ –±–∏–ª–µ—Ç–æ–≤ –≤ –æ–¥–∏–Ω –∫–æ–Ω–µ—Ü
@router.callback_query(StateFilter(FSMFillForm.fill_date_departure_kb),Text(text="one_way"))
async def process_ticket_one_way(callback: CallbackQuery):
    print(user_answer)
    for i in bot_answer:
        await i.delete()
    await callback.message.answer(text="–í–∞—à–∏ –±–∏–ª–µ—Ç—ã:")
    ticket=Api.api_response_1way(user_answer[callback.from_user.id]["departure"],user_answer[callback.from_user.id]["arrival"],
                                        f'{user_answer[callback.from_user.id]["date_departure"]["year"]}-{keyboards.months_number[user_answer[callback.from_user.id]["date_departure"]["month"]]}-{user_answer[callback.from_user.id]["date_departure"]["day"]}')
    if ticket:
        for i in ticket:
            await callback.message.answer(text=i[0], reply_markup=keyboards.url_kb(i[1]))
    else:
        await callback.message.answer(text="–ù–∞ –¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    

#–•–µ–Ω–¥–ª–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–ª–µ—Ç–∞ –≥–æ–¥ 
@router.callback_query(Text(text="two_way"))
async def process_year_return(callback: CallbackQuery, state: FSMContext):
    answer_message_year = await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ–¥:", reply_markup=keyboards.year_kb())
    bot_answer.append(answer_message_year)
    await state.set_state(FSMFillForm.fill_date_return)
    
#–•–µ–Ω–¥–ª–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–ª–µ—Ç–∞ –º–µ—Å—è—Ü 
@router.callback_query(StateFilter(FSMFillForm.fill_date_return),Text(text=keyboards.year))
async def process_month_return(callback: CallbackQuery):
    if user_answer[callback.from_user.id]["return_departure_date"]["year"]:
        user_answer[callback.from_user.id]["return_departure_date"]["year"]= callback.data
        await answer_message_month.edit_text(text="–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—è—Ü:",
                                         reply_markup=keyboards.month_kb(user_answer[callback.from_user.id]["return_departure_date"]["year"]))
        if user_answer[callback.from_user.id]["return_departure_date"]["day"]:
            await answer_message_day_return.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å:", reply_markup=keyboards.day_kb(int(user_answer[callback.from_user.id]["return_departure_date"]["year"]),
                                                                                    int(1+keyboards.months.index(user_answer[callback.from_user.id]["return_departure_date"]["month"]))))
    else:
        user_answer[callback.from_user.id]["return_departure_date"]["year"]= callback.data
        answer_message_month = await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—è—Ü:", reply_markup=keyboards.month_kb(user_answer[callback.from_user.id]["return_departure_date"]["year"]))
    bot_answer.append(answer_message_month)  

#–•–µ–Ω–¥–ª–µ—Ä –≤—ã–ª–µ—Ç–∞ –ø—Ä–∏–ª–µ—Ç–∞.–¥–µ–Ω—å
@router.callback_query(StateFilter(FSMFillForm.fill_date_return),Text(text=keyboards.months))
async def process_day_return(callback: CallbackQuery, state: FSMContext):
    global answer_message_day_return
    if user_answer[callback.from_user.id]["return_departure_date"]["month"]:
        user_answer[callback.from_user.id]["return_departure_date"]["month"] = callback.data
        await answer_message_day_return.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å:", reply_markup=keyboards.day_kb(int(user_answer[callback.from_user.id]["return_departure_date"]["year"]),
                                                                                    int(1+keyboards.months.index(user_answer[callback.from_user.id]["return_departure_date"]["month"]))))
        
    else:
        user_answer[callback.from_user.id]["return_departure_date"]["month"] = callback.data
        answer_message_day_return = await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å:", reply_markup=keyboards.day_kb(int(user_answer[callback.from_user.id]["return_departure_date"]["year"]),
                                                                                    int(1+keyboards.months.index(user_answer[callback.from_user.id]["return_departure_date"]["month"]))))
    bot_answer.append(answer_message_day_return)
    await state.set_state(FSMFillForm.fill_way_two_ticket)


# –í—ã–¥–∞—á–∞ –±–∏–ª–µ—Ç–æ–≤ –≤ –¥–≤–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(StateFilter(FSMFillForm.fill_way_two_ticket))
async def process_ticket_one_way(callback: CallbackQuery):
    user_answer[callback.from_user.id]["return_departure_date"]["day"]= callback.data
    for i in bot_answer:
        try:
            await i.delete()
        except:
            pass
    await callback.message.answer(text="–í–∞—à–∏ –±–∏–ª–µ—Ç—ã:")
    print(user_answer)
    ticket=Api.api_response_2way(user_answer[callback.from_user.id]["departure"],user_answer[callback.from_user.id]["arrival"],
                                        f'{user_answer[callback.from_user.id]["date_departure"]["year"]}-{keyboards.months_number[user_answer[callback.from_user.id]["date_departure"]["month"]]}-{user_answer[callback.from_user.id]["date_departure"]["day"]}',
                                        f'{user_answer[callback.from_user.id]["return_departure_date"]["year"]}-{keyboards.months_number[user_answer[callback.from_user.id]["return_departure_date"]["month"]]}-{user_answer[callback.from_user.id]["return_departure_date"]["day"]}')
    if ticket:
        for i in ticket:
            await callback.message.answer(text=i[0], reply_markup=keyboards.url_kb(i[1]))
    else:
        await callback.message.answer(text="–ù–∞ –¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

